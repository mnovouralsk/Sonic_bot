import os
import uuid
import logging
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.types import FSInputFile

from models.state import Form
from services.speech_to_text import recognize_text, create_text_file
from services.gpt_service import generate_text_with_gpt, generate_text_ideas_with_gpt
from utils.file_utils import cleanup_temp_files
from services.database import DataBase
from config import EXTENSION

router = Router()
database = DataBase()

@router.message(lambda message: message.audio)
async def handle_audio(message: Message, state: FSMContext):
    user_id = message.from_user.id
    referal = database.get_referrer_id(user_id)
    isReferralActive = referal != 0

    audio = message.audio
    if audio.mime_type != "audio/mpeg" or audio.duration > 1800:
        await message.answer("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å MP3 –∏ –º–µ–Ω–µ–µ 30 –º–∏–Ω—É—Ç.")
        return

    unique_id = str(uuid.uuid4())
    file_path = f"data/temp/{unique_id}.mp3"
    wav_file = f"data/temp/{unique_id}.wav"

    os.makedirs("data/temp", exist_ok=True)

    try:
        file = await message.bot.get_file(audio.file_id)
        await message.bot.download_file(file.file_path, file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await state.update_data(
            unique_id=unique_id,
            file_path=file_path,
            wav_file=wav_file,
            isReferralActive=isReferralActive)

        # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        await process_format_selection(message, state)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ.")
        if os.path.exists(file_path):
            os.remove(file_path)

@router.message(StateFilter(Form.waiting_for_format))
async def process_format_selection(message: Message, state: FSMContext):
    user_data = await state.get_data()
    unique_id = user_data.get('unique_id')
    file_path = user_data.get('file_path')
    wav_file = user_data.get('wav_file')
    isReferralActive = user_data.get('isReferralActive')

    # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    await message.answer("–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ...")

    try:
        text = recognize_text(file_path, wav_file)
        if not text:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç.")
            return

        await state.update_data(text=text)
        extension_list = EXTENSION #if isReferralActive else [EXTENSION[0]]

        # if isReferralActive:
        prompt = "–í–æ—Ç —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞, —Å–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫—É—é –≤–µ—Ä—Å–∏—é, –æ—Ñ–æ—Ä–º–∏ –≤ –≤–∏–¥–µ —É—Ä–æ–∫–∞, –≤—ã–±–µ—Ä–∏ –æ—Å—Ç–Ω–æ–≤–Ω—É—é –º—ã—Å–ª—å –∏–ª–∏ –º—ã—Å–ª–∏ –∫–æ—Ç–æ—Ä—É—é –æ–Ω –Ω–µ—Å–µ—Ç, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –Ω–µ—Å–µ—Ç –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Ç–æ –≤–µ—Ä–Ω–∏ False, —Å–¥–µ–ª–∞–π —á–∏—Ç–∞–±–µ–ª—å–Ω–æ –∏ —Å–¥–µ–ª–∞–π –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown —ç—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–ø–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∫—Ä–æ–º–µ False –∏ –Ω–µ –¥–æ–ø–∏—Å—ã–≤–∞–π –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ, –∞ —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–Ω–∏:\n\n"
        text = generate_text_ideas_with_gpt(text, prompt)

        prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ù–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π —É—Ä–æ–∫ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–º–µ –≤–∏–¥–µ–æ. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º: –≤–≤–µ–¥–µ–Ω–∏–µ, –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è, –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –≤—ã–≤–æ–¥—ã –∏ —Å–æ–≤–µ—Ç—ã. –£–±–µ—Ä–∏ –ª–∏—à–Ω—é—é –≤–æ–¥—É, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏ –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã. –°–æ—Ö—Ä–∞–Ω–∏ —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—É—é –∏ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ–±—ã —É—Ä–æ–∫ –±—ã–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ –ª–µ–≥–∫–æ —á–∏—Ç–∞–ª—Å—è. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–º–µ—Ç–∫—É markdown, —Å–ø–∏—Å–∫–∏ –¥–µ–ª–∞–π —Å –ø–æ–º–æ—â—å—é –æ–±—ã—á–Ω—ã—Ö —Ü–∏—Ñ—Ä –∏–ª–∏ —Ç–∏—Ä–µ, –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤—ã–¥–µ–ª—è–π –ø—Ä–æ–ø–∏—Å–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏. –í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ —Å–∞–º –æ—Ç–≤–µ—Ç, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ—Ç —Å–µ–±—è. –û—Ç–≤–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n\n"
        text = generate_text_ideas_with_gpt(text, prompt)

        for ext in extension_list:
            output_file = create_text_file(text, ext, unique_id)
            if output_file:
                await message.answer_document(FSInputFile(output_file), caption="–í–∞—à —Ñ–∞–π–ª –≥–æ—Ç–æ–≤ üìÑ")
            else:
                await message.answer(f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ {ext}.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.")

    finally:
        cleanup_temp_files(unique_id)
